enum PublicBadgeStatus {
  PENDING
  APPROVED
  SIGNED
  REJECTED
}

type Proof {
  proofId: GUID!
  genre: String!
  name: String!
  description: String!
  narrative: [String!]!
}

interface PublicBadge {
  badgeId: GUID!
  status: PublicBadgeStatus!
  valueCaseId: ID!
  valueCase: ValueCase!
  name: String!
  tags: [String]!
  description: String!
  narrative: String!
  recipientId: ID!
  recipient: ApprovedOrganization!
}

type PendingPublicBadge implements PublicBadge {
  badgeId: GUID!
  status: PublicBadgeStatus!
  valueCaseId: ID!
  valueCase: ValueCase!
  name: String!
  tags: [String]!
  description: String!
  narrative: String!
  recipientId: ID!
  recipient: ApprovedOrganization!
}

type ApprovedPublicBadge implements PublicBadge {
  badgeId: GUID!
  status: PublicBadgeStatus!
  valueCaseId: ID!
  valueCase: ValueCase!
  name: String!
  tags: [String]!
  description: String!
  narrative: String!
  recipientId: ID!
  evidence: [Proof!]!
  recipient: ApprovedOrganization!
}

type RejectedPublicBadge implements PublicBadge {
  badgeId: GUID!
  status: PublicBadgeStatus!
  valueCaseId: ID!
  valueCase: ValueCase!
  name: String!
  tags: [String]!
  description: String!
  narrative: String!
  recipientId: ID!
  evidence: [Proof!]!
  recipient: ApprovedOrganization!
}

type SignedPublicBadge implements PublicBadge {
  badgeId: GUID!
  status: PublicBadgeStatus!
  valueCaseId: ID!
  valueCase: ValueCase!
  name: String!
  tags: [String]!
  description: String!
  narrative: String!
  recipientId: ID!
  evidence: [Proof!]!
  issuedOn: String!
  expires: String!
  artifact: OpenBadgeArtifact!
  recipient: ApprovedOrganization!
}

input PublicBadgeInput {
  valueCaseId: ID!
  domainName: URL!
}
